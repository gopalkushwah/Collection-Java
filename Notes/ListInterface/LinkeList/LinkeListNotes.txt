LinkedList 	----> Linked list is a linear data structure that includes a series of connected nodes
			----> A node in the linked list contains two parts, i.e., first is the data part and second is the address part.
			----> The last node of the list contains a pointer to the null.
			
			
			----> it can contain duplicate elements.
			----> it maintains insertion order.
			----> it is non synchronized.
			----> manipulation is fast because no shifting needs to occur.
			----> it can be used as a list, stack or queue.
			
			----> Doubly-linked list implementation of the List and Deque interfaces. 
			----> Implements all optional list operations, and permits all elements (including null).
			----> it can have multiple null values
			---->
			----> 
			
Methods of the LinkedList

  transient int size;
  transient java.util.LinkedList$Node<E> first;
  transient java.util.LinkedList$Node<E> last;
  public java.util.LinkedList();
  public java.util.LinkedList(java.util.Collection<? extends E>);
  void linkLast(E);
  void linkBefore(E, java.util.LinkedList$Node<E>);
  E unlink(java.util.LinkedList$Node<E>);
  public E getFirst();
  public E getLast();
  public E removeFirst();
  public E removeLast();
  public void addFirst(E);
  public void addLast(E);
  public boolean contains(java.lang.Object);
  public int size();
  public boolean add(E);
  public boolean remove(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public void clear();
  public E get(int);
  public E set(int, E);
  public void add(int, E);
  public E remove(int);
  java.util.LinkedList$Node<E> node(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public E peek();
  public E element();
  public E poll();
  public E remove();
  public boolean offer(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E peekFirst();
  public E peekLast();
  public E pollFirst();
  public E pollLast();
  public void push(E);
  public E pop();
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public java.util.ListIterator<E> listIterator(int);
  public java.util.Iterator<E> descendingIterator();
  public java.lang.Object clone();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.util.Spliterator<E> spliterator();

*******************************************************************************
Constructor of LinkedList
LinkedList() ----> Constructs an empty list.

LinkedList(Collection<? extends E> c) ---> Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.
*******************************************************************************
LinkedListEx1 ---> Learn about the constructors 
*******************************************************************************
LinkedListEx2 ---> Learn about the all methods 
*******************************************************************************
LinkedListEx3 ---> Learn about iterator
*******************************************************************************

*******************************************************************************