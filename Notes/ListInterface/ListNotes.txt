-> List its an interface 
-> it extends Collection<E> and Iterable<E> Interface

- its an ordered collection (also known as a sequence). 
- The user of this interface has precise control over where in the list each element is inserted. 
- The user can access elements by their integer index (position in the list), and search for elements in the list.
- lists typically allow duplicate elements
- lists typically allow pairs of elements e1 and e2 such that e1.equals(e2)
- lists typically allow multiple null elements if they allow null elements at all

-
-
-

methods of List Interface
"List.java"

  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean addAll(int, java.util.Collection<? extends E>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public default void replaceAll(java.util.function.UnaryOperator<E>);
  public default void sort(java.util.Comparator<? super E>);
  public abstract void clear();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract E get(int);
  public abstract E set(int, E);
  public abstract void add(int, E);
  public abstract E remove(int);
  public abstract int indexOf(java.lang.Object);
  public abstract int lastIndexOf(java.lang.Object);
  public abstract java.util.ListIterator<E> listIterator();
  public abstract java.util.ListIterator<E> listIterator(int);
  public abstract java.util.List<E> subList(int, int);
  public default java.util.Spliterator<E> spliterator();
  public static <E> java.util.List<E> of();
  public static <E> java.util.List<E> of(E);
  public static <E> java.util.List<E> of(E, E);
  public static <E> java.util.List<E> of(E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E, E, E, E, E);
  public static <E> java.util.List<E> of(E, E, E, E, E, E, E, E, E, E);
  public static <E> java.util.List<E> of(E...);
  public static <E> java.util.List<E> copyOf(java.util.Collection<? extends E>);


implementing classes of List Interface

-> ArrayList
-> LinkedList
-> Vector
-> Stack
-> AbstractList
-> AbstractSequentialList
-> AttributeList
-> CopyOnWriteArrayList
-> RoleList
-> RoleUnresolvedList

----------------------------------------------------------------
Lets learn ArrayList(class) - go to ArrayList folder and Open ArrayList.txt
----------------------------------------------------------------
Lets learn Vector(class) - go to Vector folder and Open VectorNotes.txt
----------------------------------------------------------------
Lets learn Stack(class) - go to Stack folder and Open StackNotes.txt
----------------------------------------------------------------
Lets learn LinkeList(class) - go to LinkeList folder and Open LinkeListNotes.txt

----------------------------------------------------------------

